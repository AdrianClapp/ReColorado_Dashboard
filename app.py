# -*- coding: utf-8 -*-
"""app.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ZaIqHNPQwsaZQdy7PCVH3WHr3iO0WPlC
"""

import streamlit as st
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
from scipy.stats import ttest_ind
import numpy as np

st.set_page_config("REcolorado Agent Performance Dashboard", layout="wide")

# ---------- Load Data ----------
@st.cache_data
def load_data():
    df_post = pd.read_csv("data/df_post.csv")
    df_pre1 = pd.read_csv("data/df_pre1.csv")
    df_pre2 = pd.read_csv("data/df_pre2.csv")
    summary_df = pd.read_csv("data/summary_df.csv")
    volume_counts = pd.read_csv("data/volume_counts.csv")
    segment_summary = pd.read_csv("data/segment_summary.csv")
    return df_post, df_pre1, df_pre2, summary_df, volume_counts, segment_summary

df_post, df_pre1, df_pre2, summary_df, volume_counts, segment_summary = load_data()

# ---------- Setup ----------
st.title("REcolorado Performance Dashboard")
st.markdown("Analyzing REALTOR vs NON-REALTOR performance before and after the NAR settlement.")

# ---------- Data Cleaning Page ----------
st.sidebar.title("Navigation")
page = st.sidebar.radio("Go to", ["Dashboard", "Data Cleaning & Assumptions"])

if page == "Data Cleaning & Assumptions":
    st.title("Data Cleaning & Assumptions")
    st.markdown("""
    ### Agent Classification:
    - Listing agents are classified using the `ListAgentAOR` field.
    - Buyer agents are classified using the `BuyerAgentAOR` field.
    - If the string 'realtor' appears (case-insensitive) in the respective field, the agent is tagged as a REALTOR; otherwise, as a NON-REALTOR.

    ### Deduplication:
    - Agents who appeared as both REALTORS and NON-REALTORS in different transactions were removed to prevent ambiguous categorization.

    ### Outlier Removal:
    - Outliers were detected using the IQR method based on annual sales volume and removed to avoid skewed results.
    - This filtering was done **after** agent classification but **before** aggregation of metrics.

    ### Commission Assumption:
    - Seller-side commissions are assumed to be 3%.
    - Buyer-side commissions are assumed to be 2.8%.
    """)
else:
    # ---------- Filters ----------
    st.sidebar.header("Filters")
    metric_type = st.sidebar.selectbox("Choose Metric", ["Sales Volume", "GCI", "Transaction Sides"])
    view_group = st.sidebar.selectbox("Agent Type", ["All", "REALTOR", "NON-REALTOR"])
    compare_periods = st.sidebar.checkbox("Compare Time Periods", value=True)

    # ---------- Metric Bar Chart ----------
    st.subheader(f"Average {metric_type} by Agent Type")

    metric_map = {
        "Sales Volume": ["Avg Sales Volume (REALTOR)", "Avg Sales Volume (NON-REALTOR)"],
        "GCI": ["Avg GCI (REALTOR)", "Avg GCI (NON-REALTOR)"],
        "Transaction Sides": ["Avg Sides (REALTOR)", "Avg Sides (NON-REALTOR)"]
    }

    plot_data = summary_df.melt(id_vars='Period', value_vars=metric_map[metric_type], var_name='AgentType', value_name='Value')
    plot_data['AgentType'] = plot_data['AgentType'].str.extract(r'\((.*?)\)')

    if view_group != "All":
        plot_data = plot_data[plot_data['AgentType'] == view_group]

    sns.set_style("whitegrid")
    REALTOR_COLOR = '#003B71'
    NON_REALTOR_COLOR = '#B7D9F7'
    palette = {"REALTOR": REALTOR_COLOR, "NON-REALTOR": NON_REALTOR_COLOR}

    fig, ax = plt.subplots(figsize=(10, 5))
    sns.barplot(data=plot_data, x="Period", y="Value", hue="AgentType", palette=palette, ax=ax)
    ax.set_ylabel(f"Average {metric_type}")
    for container in ax.containers:
        ax.bar_label(container, fmt='%.0f', label_type='edge', fontsize=8)
    st.pyplot(fig)

    # ---------- Average Metric by Year ----------
    st.subheader(f"Average {metric_type} per Year")
    df_all = pd.concat([df_post, df_pre1, df_pre2], ignore_index=True)

    metric_col = 'TotalSalesVolume' if metric_type == 'Sales Volume' else 'GCI' if metric_type == 'GCI' else 'TransactionSides'
    yearly_summary = df_all.groupby(['Year', 'AgentType']).agg(AvgMetric=(metric_col, 'mean')).reset_index()

    fig_year, ax_year = plt.subplots(figsize=(10, 5))
    sns.barplot(data=yearly_summary, x='Year', y='AvgMetric', hue='AgentType', palette=palette, ax=ax_year)
    ax_year.set_ylabel(f"Average {metric_type}")
    ax_year.set_title(f"Average {metric_type} by Year")
    for container in ax_year.containers:
        ax_year.bar_label(container, fmt='%.0f', label_type='edge', fontsize=8)
    st.pyplot(fig_year)

    # ---------- Top Producer Segmentation ----------
    st.subheader("Top Producer Segmentation")
    seg_fig, seg_ax = plt.subplots(figsize=(10, 5))
    sns.barplot(data=volume_counts, x='VolumeSegment', y='Percentage', hue='AgentType', palette=palette, ax=seg_ax)
    seg_ax.set_ylabel('Percentage of Agents')
    seg_ax.set_title("Agent Count by Volume Tier")
    for container in seg_ax.containers:
        seg_ax.bar_label(container, fmt='%.1f%%', label_type='edge', fontsize=8)
    st.pyplot(seg_fig)

    # ---------- Activity Stratification ----------
    st.subheader("Activity Stratification")
    act_fig, act_ax = plt.subplots(figsize=(10, 5))
    sns.barplot(data=segment_summary, x='ActivitySegment', y='AvgSalesVolumePerAgent', hue='AgentType', palette=palette, ax=act_ax)
    act_ax.set_ylabel('Avg Sales Volume ($)')
    act_ax.set_title("Avg Sales Volume by Transaction Sides")
    for container in act_ax.containers:
        act_ax.bar_label(container, fmt='%.0f', label_type='edge', fontsize=8)
    st.pyplot(act_fig)

    # ---------- Distribution + T-Test ----------
    st.subheader(f"Distribution of {metric_type} (REALTORS Only)")
    show_log_option = metric_type in ['Sales Volume', 'GCI']
    use_log = st.checkbox("Log-Transform" + (f" {metric_type}" if show_log_option else ""), value=show_log_option)

    col_map = {
        ('Sales Volume', False): 'Volume',
        ('Sales Volume', True): 'LogVolume',
        ('GCI', False): 'GCI',
        ('GCI', True): 'LogGCI',
        ('Transaction Sides', False): 'TransactionSides',
        ('Transaction Sides', True): 'LogSides'
    }

    axis_label = {
        ('Sales Volume', False): "Volume ($)",
        ('Sales Volume', True): "Log10(Volume + 1)",
        ('GCI', False): "GCI ($)",
        ('GCI', True): "Log10(GCI + 1)",
        ('Transaction Sides', False): "Transaction Sides (#)",
        ('Transaction Sides', True): "Log10(Transaction Sides + 1)"
    }

    for df in [df_pre1, df_pre2, df_post]:
        df['Volume'] = df['TotalSalesVolume']
        df['LogVolume'] = np.log10(df['TotalSalesVolume'] + 1)
        df['GCI'] = df['Volume'] * (0.03 if 'ListAgentKeyNumeric' in df.columns else 0.028)
        df['LogGCI'] = np.log10(df['GCI'] + 1)
        df['LogSides'] = np.log10(df['TransactionSides'] + 1)

    col = col_map[(metric_type, use_log)]

    hist_fig, ax = plt.subplots(figsize=(10, 5))
    for df, label, color in zip([df_pre1, df_pre2, df_post],
                                ["Pre Oct–Mar", "Pre Apr–Sep", "Post Oct–Mar"],
                                ['#B7D9F7', '#003B71', '#F47C3C']):
        sns.histplot(df[df['AgentType'] == 'REALTOR'][col], label=label, kde=True, stat="count", bins=40, color=color, alpha=0.6)
        mean_val = df[df['AgentType'] == 'REALTOR'][col].mean()
        ax.axvline(mean_val, color=color, linestyle='--', linewidth=1)
        ax.text(mean_val, ax.get_ylim()[1]*0.9, f"{mean_val:.2f}", color=color, ha='center', fontsize=8)

    ax.set_title(f"REALTOR {metric_type} Distribution")
    ax.set_xlabel(axis_label[(metric_type, use_log)])
    ax.set_ylabel("Count")
    ax.legend()
    st.pyplot(hist_fig)

    # ---------- T-Test Results ----------
    st.markdown(f"### T-Test Results on {metric_type} (REALTOR Only)")

    t1_stat, t1_p = ttest_ind(df_post[df_post['AgentType'] == 'REALTOR'][col],
                              df_pre1[df_pre1['AgentType'] == 'REALTOR'][col], equal_var=False)

    t2_stat, t2_p = ttest_ind(df_post[df_post['AgentType'] == 'REALTOR'][col],
                              df_pre2[df_pre2['AgentType'] == 'REALTOR'][col], equal_var=False)

    st.markdown(f"- **Post vs Pre Oct–Mar**: t = `{t1_stat:.2f}`, p = `{t1_p:.4f}`")
    st.markdown(f"- **Post vs Pre Apr–Sep**: t = `{t2_stat:.2f}`, p = `{t2_p:.4f}`")