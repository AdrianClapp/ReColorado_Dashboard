# -*- coding: utf-8 -*-
"""app.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ZaIqHNPQwsaZQdy7PCVH3WHr3iO0WPlC
"""

import streamlit as st
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
from scipy.stats import ttest_ind
import numpy as np

st.set_page_config("REcolorado Agent Performance Dashboard", layout="wide")

# ---------- Load Data ----------
@st.cache_data
def load_data():
    df_post = pd.read_csv("data/df_post.csv")
    df_pre1 = pd.read_csv("data/df_pre1.csv")
    df_pre2 = pd.read_csv("data/df_pre2.csv")
    summary_df = pd.read_csv("data/summary_df.csv")
    volume_counts = pd.read_csv("data/volume_counts.csv")
    segment_summary = pd.read_csv("data/segment_summary.csv")
    return df_post, df_pre1, df_pre2, summary_df, volume_counts, segment_summary

df_post, df_pre1, df_pre2, summary_df, volume_counts, segment_summary = load_data()

# ---------- Setup ----------

st.title("üè† REcolorado Performance Dashboard")
st.markdown("Analyzing REALTOR vs NON-REALTOR performance before and after the NAR settlement.")

# ---------- Filters ----------
st.sidebar.header("Filters")
metric_type = st.sidebar.selectbox("Choose Metric", ["Sales Volume", "GCI", "Transaction Sides"])
view_group = st.sidebar.selectbox("Agent Type", ["All", "REALTOR", "NON-REALTOR"])
compare_periods = st.sidebar.checkbox("Compare Time Periods", value=True)

# ---------- Metric Bar Chart ----------
st.subheader(f"üìä Average {metric_type} by Agent Type")

metric_map = {
    "Sales Volume": ["Avg Sales Volume (REALTOR)", "Avg Sales Volume (NON-REALTOR)"],
    "GCI": ["Avg GCI (REALTOR)", "Avg GCI (NON-REALTOR)"],
    "Transaction Sides": ["Avg Sides (REALTOR)", "Avg Sides (NON-REALTOR)"]
}

plot_data = summary_df.melt(id_vars='Period', value_vars=metric_map[metric_type], var_name='AgentType', value_name='Value')
plot_data['AgentType'] = plot_data['AgentType'].str.extract(r'\((.*?)\)')

if view_group != "All":
    plot_data = plot_data[plot_data['AgentType'] == view_group]

sns.set_style("whitegrid")
REALTOR_COLOR = '#003B71'
NON_REALTOR_COLOR = '#F47C3C'
palette = [REALTOR_COLOR, NON_REALTOR_COLOR]

fig, ax = plt.subplots(figsize=(10, 5))
sns.barplot(data=plot_data, x="Period", y="Value", hue="AgentType", palette=palette, ax=ax)
ax.set_ylabel(f"Average {metric_type}")
st.pyplot(fig)

# ---------- Top Producer Segmentation ----------
st.subheader("üèÖ Top Producer Segmentation")
seg_fig, seg_ax = plt.subplots(figsize=(10, 5))
sns.barplot(data=volume_counts, x='VolumeSegment', y='Percentage', hue='AgentType', palette=palette, ax=seg_ax)
seg_ax.set_ylabel('Percentage of Agents')
seg_ax.set_title("Agent Count by Volume Tier")
st.pyplot(seg_fig)

# ---------- Activity Stratification ----------
st.subheader("üìà Activity Stratification")
act_fig, act_ax = plt.subplots(figsize=(10, 5))
sns.barplot(data=segment_summary, x='ActivitySegment', y='AvgSalesVolumePerAgent', hue='AgentType', palette=palette, ax=act_ax)
act_ax.set_ylabel('Avg Sales Volume ($)')
act_ax.set_title("Avg Sales Volume by Transaction Sides")
st.pyplot(act_fig)

# ---------- Distribution + T-Test ----------
st.subheader("üîç Distribution of Sales Volume (REALTORS Only)")
use_log = st.checkbox("Log-Transform Volume", value=True)

for df, label in zip([df_pre1, df_pre2, df_post], ["Pre Oct‚ÄìMar", "Pre Apr‚ÄìSep", "Post Oct‚ÄìMar"]):
    df['Volume'] = df['TotalSalesVolume']
    df['LogVolume'] = np.log10(df['TotalSalesVolume'] + 1)

hist_fig, ax = plt.subplots(figsize=(10, 5))
for df, label, color in zip([df_pre1, df_pre2, df_post],
                            ["Pre Oct‚ÄìMar", "Pre Apr‚ÄìSep", "Post Oct‚ÄìMar"],
                            ['#B7D9F7', '#003B71', '#F47C3C']):
    col = 'LogVolume' if use_log else 'Volume'
    sns.histplot(df[df['AgentType'] == 'REALTOR'][col], label=label, kde=True, stat="density", bins=40, color=color, alpha=0.6)

ax.set_title("REALTOR Sales Volume Distribution")
ax.set_xlabel("Log10(Volume + 1)" if use_log else "Volume ($)")
ax.legend()
st.pyplot(hist_fig)

# ---------- Optional: T-Test Results ----------
st.markdown("### üìê T-Test Results (REALTOR Only)")
from scipy.stats import ttest_ind

col = 'LogVolume' if use_log else 'Volume'
t1_stat, t1_p = ttest_ind(df_post[df_post['AgentType'] == 'REALTOR'][col],
                          df_pre1[df_pre1['AgentType'] == 'REALTOR'][col], equal_var=False)

t2_stat, t2_p = ttest_ind(df_post[df_post['AgentType'] == 'REALTOR'][col],
                          df_pre2[df_pre2['AgentType'] == 'REALTOR'][col], equal_var=False)

st.markdown(f"- **Post vs Pre Oct‚ÄìMar**: t = `{t1_stat:.2f}`, p = `{t1_p:.4f}`")
st.markdown(f"- **Post vs Pre Apr‚ÄìSep**: t = `{t2_stat:.2f}`, p = `{t2_p:.4f}`")